width = length(customer.data)
len = length(customer.data$id)
user.type = rep(0, times = len)
previd = customer.data[1][1]
startid = previd
for(i in seq(len)){
startid = customer.data[i,1]
if(customer.data[i,2] == 2){
user.type[i] = 3
}else if(startid!=previd){
diff = (as.Date('12/31/2014','%m/%d/%Y') - customer.data[i,4])
if(diff>60){
user.type[i] = 2
}else{
user.type[i] = 1
}
}
previd = startid
}
customer.data$userType <- user.type
View(customer.data)
width = length(customer.data)
len = length(customer.data$id)
user.type = rep(0, times = len)
previd = customer.data[1][1]
startid = previd
for(i in seq(len)){
startid = customer.data[i,1]
if(customer.data[i,2] == 2){
user.type[i] = 3
}else if(startid!=previd){
diff = (as.Date('12/31/2014','%m/%d/%Y') - customer.data[i,4])
if(diff>60){
user.type[i] = 2
}else{
user.type[i] = 1
}
}else{
user.type[i] = 1
}
previd = startid
}
customer.data$userType <- user.type
View(customer.data)
View(customer.data)
width = length(customer.data)
len = length(customer.data$id)
user.type = rep(0, times = len)
previd = customer.data[1][1]
startid = previd
for(i in seq(len)){
startid = customer.data[i,1]
if(customer.data[i,2] == 2){
user.type[i] = 3
break;
}else if(customer.data[i,2] == 0){
user.type[i] = 1
break;
}else if(startid!=previd){
diff = (as.Date('12/31/2014','%m/%d/%Y') - customer.data[i,4])
if(diff>60){
user.type[i-1] = 2
}else{
user.type[i-1] = 1
}
break;
}else{
user.type[i] = 1
}
previd = startid
}
customer.data$userType <- user.type
width = length(customer.data)
len = length(customer.data$id)
user.type = rep(0, times = len)
previd = customer.data[1][1]
startid = previd
for(i in seq(len)){
startid = customer.data[i,1]
if(customer.data[i,2] == 2){
user.type[i] = 3
}else if(customer.data[i,2] == 0){
user.type[i] = 1
}else if(startid!=previd){
diff = (as.Date('12/31/2014','%m/%d/%Y') - customer.data[i,4])
if(diff>60){
user.type[i-1] = 2
}else{
user.type[i-1] = 1
}
}else{
user.type[i] = 1
}
previd = startid
}
customer.data$userType <- user.type
width = length(customer.data)
len = length(customer.data$id)
user.type = rep(0, times = len)
previd = customer.data[1][1]
startid = previd
for(i in seq(len)){
startid = customer.data[i,1]
if(customer.data[i,2] == 2){
user.type[i] = 3
}else if(customer.data[i,2] == 0){
user.type[i] = 1
}else if(startid!=previd){
diff = (as.Date('12/31/2014','%m/%d/%Y') - customer.data[i,4])
if(diff>60){
user.type[i-1] = 2
}else{
user.type[i-1] = 1
}
}else{
user.type[i] = 1
}
previd = startid
}
width = length(customer.data)
len = length(customer.data$id)
user.type = rep(0, times = len)
previd = customer.data[1][1]
startid = previd
for(i in seq(len)){
startid = customer.data[i,1]
if(customer.data[i,2] == 2){
user.type[i] = 3
}else if(customer.data[i,2] == 0){
user.type[i] = 1
}else if(startid!=previd){
diff = (as.Date('12/31/2014','%m/%d/%Y') - customer.data[i-1,4])
if(diff>60){
user.type[i-1] = 2
}else{
user.type[i-1] = 1
}
}else{
user.type[i] = 1
}
previd = startid
}
customer.data$userType <- user.type
(as.Date('12/31/2014','%m/%d/%Y') - customer.data[1,4])
View(customer.data)
summary(customer.data$userType)
width = length(customer.data)
len = length(customer.data$id)
user.type = rep(0, times = len)
previd = customer.data[1][1]
startid = previd
for(i in seq(len)){
startid = customer.data[i,1]
if(customer.data[i,2] == 2){
user.type[i] = 3
}else if(startid!=previd){
diff = (as.Date('12/31/2014','%m/%d/%Y') - customer.data[i-1,4])
if(diff>60){
user.type[i-1] = 2
}
}else{
user.type[i] = 1
}
previd = startid
}
customer.data$userType <- user.type
summary(customer.data$userType)
width = length(customer.data)
len = length(customer.data$id)
user.type = rep(0, times = len)
previd = customer.data[1][1]
startid = previd
for(i in seq(len)){
startid = customer.data[i,1]
if(customer.data[i,2] == 2){
user.type[i] = 3
}else if(startid!=previd){
diff = (as.Date('12/31/2014','%m/%d/%Y') - customer.data[i-1,4])
if(diff>60){
user.type[i-1] = 2
user.type[i] = 1
}else{
user.type[i] = 1
}
}else{
user.type[i] = 1
}
previd = startid
}
customer.data$userType <- user.type
summary(customer.data$userType)
customer.data.segOne <- subset(customer.data,select('pages','onsite','entered','completed'))
customer.data.segOne <- subset(customer.data,select = c('pages','onsite','entered','completed'))
View(customer.data.segOne)
customer.data.segOne <- subset(customer.data,select = c('id','pages','onsite','entered','completed','userType'))
View(customer.data.segOne)
#select the data we need
customer.data.segOne <- subset(customer.data,select = c('id','pages','onsite','entered','completed','userType'))
#split into training and test dataset
dt = sort(sample(nrow(customer.data.segOne), nrow(customer.data.segOne)*.7))
train.segOne<-customer.data.segOne[dt,]
test.segOne<-customer.data.segOne[-dt,]
#select the data we need
customer.data.segOne <- subset(customer.data,select = c('pages','onsite','entered','completed','userType'))
#split into training and test dataset
dt = sort(sample(nrow(customer.data.segOne), nrow(customer.data.segOne)*.7))
train.segOne<-customer.data.segOne[dt,]
test.segOne<-customer.data.segOne[-dt,]
set.seed(42)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=500, proximity=T)
View(train.segOne)
set.seed(42)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=50000, proximity=T)
set.seed(42)
memory.size(max = FALSE)
memory.limit(size = NA)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=50000, proximity=T)
set.seed(42)
memory.size(max = FALSE)
memory.limit(size = 8000000)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=50000, proximity=T)
set.seed(42)
memory.size(max = FALSE)
memory.limit(1000000)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=50000, proximity=T)
set.seed(42)
memory.limit(1000000)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=50000, proximity=T)
View(train.segOne)
memory.limit()
memory.limit(size = 600000)
memory.limit(size = 60000000)
memory.limit()
set.seed(42)
memory.limit(1000000)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=50000, proximity=T)
set.seed(42)
memory.limit(size = 600000000)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=50000, proximity=T)
set.seed(42)
memory.limit(size = 6000000000)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=50000, proximity=T)
set.seed(42)
memory.limit(size = 60000000000)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=50000, proximity=T)
set.seed(42)
memory.limit(size = 600000000000)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=50000, proximity=T)
library(ranger)
install.packages("ranger")
library(ranger)
# remove missing vlaues before this call
rf_2 <- ranger(
as.factor(userType) ~ .,
data = train.segOne,
importance = "impurity",
num.trees = 2000
)
set.seed(42)
memory.limit(10 * 10^10)
# build the random forest model for classification
customer.segOne.rf <- randomForest(userType~., data=train.segOne, ntree=50000, proximity=T)
set.seed(42)
# remove missing vlaues before this call
customer.segOne.rf <- ranger(
as.factor(userType) ~ .,
data = train.segOne,
importance = "impurity",
num.trees = 2000
)
customer.segOne.rf.predict <- predict(customer.segOne.rf, test.segOne)
customer.segOne.rf.table <- table(customer.segOne.rf.predict, test.segOne$userType)
View(customer.segOne.rf.predict)
# KNN
train_control <- trainControl(method = "cv", number = 10)
customer.knn.segOne <- train(userType~., data = train.segOne, trControl = train_control, method = "knn")
View(customer.segOne.rf.predict)
#select the data we need
customer.data.segOne <- subset(customer.data,select = c('pages','onsite','entered','completed','userType'))
#split into training and test dataset
customer.data.segOne <- transform(
customer.data.segOne,
pages=as.integer(pages),
onsite=as.integer(onsite),
entered=as.integer(entered),
completed=as.integer(completed),
)
#select the data we need
customer.data.segOne <- subset(customer.data,select = c('pages','onsite','entered','completed','userType'))
#split into training and test dataset
customer.data.segOne <- transform(
customer.data.segOne,
pages=as.integer(pages),
onsite=as.integer(onsite),
entered=as.integer(entered),
completed=as.integer(completed)
)
dt = sort(sample(nrow(customer.data.segOne), nrow(customer.data.segOne)*.7))
train.segOne<-customer.data.segOne[dt,]
test.segOne<-customer.data.segOne[-dt,]
#select the data we need
customer.data.segOne <- subset(customer.data,select = c('pages','onsite','entered','completed','userType'))
#split into training and test dataset
customer.data.segOne <- transform(
customer.data.segOne,
pages=as.integer(pages),
onsite=as.integer(onsite),
entered=as.integer(entered),
completed=as.integer(completed),
userType = as.integer(userType)
)
dt = sort(sample(nrow(customer.data.segOne), nrow(customer.data.segOne)*.7))
train.segOne<-customer.data.segOne[dt,]
test.segOne<-customer.data.segOne[-dt,]
# KNN
train_control <- trainControl(method = "cv", number = 10)
customer.knn.segOne <- train(userType~., data = train.segOne, trControl = train_control, method = "knn")
library(tidyverse)
library(ggplot2)
library(ISLR)
library(partykit)
library(caret)
library(rpart)
library(randomForest)
library(pROC)
library(readxl)
library(binaryLogic)
library(dplyr)
library(class)
library(DMwR)
library(nnet)
library(e1071)
library(ranger)
# Importing teh data directly from Excel
customer.data <- read_excel("./ltv Dataset.xlsx", sheet = "Sheet1")
# Transform the data to teh desired format
customer.data <- transform(
customer.data,
id=as.integer(id),
status=as.integer(status),
gender=as.factor(gender),
date=as.Date(date),
pages=as.integer(pages),
onsite=as.integer(onsite),
entered=as.integer(entered),
completed=as.integer(completed),
holiday=as.integer(holiday)
)
#processing the date
customer.data$date <- as.Date(customer.data$date,'%m/%d/%Y')
customer.data$month <- months(customer.data$date)
customer.data$year <- format(customer.data$date,format = '%Y')
#calculate the average value
ltv.pages <- aggregate( pages ~ id+ month + year, customer.data, mean)
ltv.onsite <- aggregate( onsite ~ id + month + year, customer.data, mean)
#merger the table
ltv.m1 <- merge(x = ltv.pages, y = ltv.onsite, by = c('id','month','year'), all.x = TRUE)
#sort the dataframe and export it
ltv.m1 <- ltv.m1[order(ltv.m1$id),]
ltv.m1
write.csv(ltv.m1,'ltv_modelOne.csv',row.names = FALSE)
#convert the data from numeric to date type (duplicate)
#customer.data$date <- as.Date(customer.data$date, origin = "1899-12-30")
#Calculate the customer lifespan
#first group the data by ID to find the max and min date for a given customer
#along with the latest status
customer.lifespan <- customer.data[, c("id", "date", "status")] %>% group_by(id)
customer.lifespan <-customer.lifespan %>% mutate(maxDate = max(date))
customer.lifespan <-customer.lifespan %>% mutate(status = max(status))
customer.lifespan <- customer.lifespan %>% filter(date == min(date)) %>% distinct(id, .keep_all = TRUE) %>% rename(minDate = date)
#Subtract the maxDate and minDate to determine the number of days of subscription
customer.lifespan$subDays <- difftime(customer.lifespan$maxDate, customer.lifespan$minDate, units = "days")
#Determine the observed lifespan factor to be added
lifespanFraction <- 1/(with(1, sum(customer.data$status == 2))/10000)
#calculate the lifespan for the customers
customer.lifespan$lifespan <- ifelse(customer.lifespan$status == 2, customer.lifespan$subDays, customer.lifespan$subDays + lifespanFraction)
#add this data to the main dataset
customer.data$lifespan <- customer.lifespan$lifespan[match(customer.data$id,customer.lifespan$id)]
# Add 2 columns in the dataframe representing completed/holiday and onsite/entered
ltv_afterProcess <- transform(
customer.data,
CompletedVSHoliday=as.integer(entered)/as.integer(holiday),
OnsiteVSEntered=as.integer(onsite)/as.integer(entered)
)
# calculate the ratio between sum of all entered and sum of all completed
SumEnteredVSCompleted <- sum(ltv_afterProcess$entered)/sum(ltv_afterProcess$completed)
SumEnteredVSCompleted
# create a new dataframe representing teh aggregated summation of each variable per customer
aggregatedCustomerSums <- aggregate(cbind(PagesSum=ltv_afterProcess$pages, OnsiteSum=ltv_afterProcess$onsite, EnteredSum=ltv_afterProcess$entered, CompletedSum=ltv_afterProcess$completed, HolidaySum=ltv_afterProcess$holiday), by=list(Customerid=ltv_afterProcess$id), FUN=sum)
aggregatedCustomerSums<-merge(x = aggregatedCustomerSums, y = customer.data, intersect(names(aggregatedCustomerSums), names(customer.data)), by.x = "Customerid", by.y = "id", all.x=TRUE)[,c(names(aggregatedCustomerSums), "gender")]%>% distinct(Customerid, .keep_all=TRUE)
aggregatedCustomerSums <- transform(
aggregatedCustomerSums,
gender = as.factor(gender),
lifespan = customer.lifespan$lifespan,
decisiveratio = CompletedSum / EnteredSum
)
aggregatedCustomerSums <- rename(aggregatedCustomerSums, id = Customerid, pages = PagesSum, onsite = OnsiteSum, entered = EnteredSum, completed = CompletedSum, holiday = HolidaySum)
aggregatedCustomerSums$holiday.ratio <- aggregatedCustomerSums$holiday/aggregatedCustomerSums$completed
summary(aggregatedCustomerSums$holiday.ratio)
aggregatedCustomerSums$holiday.user <- ifelse(aggregatedCustomerSums$holiday.ratio>0.4573,1,0)
width = length(customer.data)
len = length(customer.data$id)
user.type = rep(0, times = len)
previd = customer.data[1][1]
startid = previd
for(i in seq(len)){
startid = customer.data[i,1]
if(customer.data[i,2] == 2){
user.type[i] = 3
}else if(startid!=previd){
diff = (as.Date('12/31/2014','%m/%d/%Y') - customer.data[i-1,4])
if(diff>60){
user.type[i-1] = 2
user.type[i] = 1
}else{
user.type[i] = 1
}
}else{
user.type[i] = 1
}
previd = startid
}
customer.data$userType <- user.type
# KNN
train_control <- trainControl(method = "cv", number = 10)
customer.knn.segOne <- train(userType~., data = train.segOne, trControl = train_control, method = "knn")
# KNN
train_control <- trainControl(method = "cv", number = 10)
customer.knn.segOne <- train(userType~., data = train.segOne, trControl = train_control, method = "knn")
customer.knn.segOne
set.seed(42)
# remove missing vlaues before this call
customer.segOne.rf <- ranger(
as.factor(userType) ~ .,
data = train.segOne,
importance = "impurity",
num.trees = 2000
)
customer.segOne.pred <- predict(customer.segOne.rf, test.segOne)
customer.segOne.rfResult<-table(customer.segOne.pred, customer.segOne$test.segOne)
customer.segOne.rfResult<-table(customer.segOne.pred, test.segOne$userType)
customer.rf <- randomForest(decisivelabel~., data=decisive.train, ntree=500, proximity=T)
customer.rf
customer.rf.predict <- predict(customer.rf, decisive.test)
customer.rf.table <- table(customer.rf.predict, decisive.test$decisivelabel)
customer.rf.table
# calculate the accuracy of our random forest model
customer.rf.misclassificationrate = mean(customer.rf.predict != decisive.test$decisivelabel)
customer.rf.accuracy <- 1- customer.rf.misclassificationrate
customer.rf.accuracy
View(customer.rf.predict)
View(customer.segOne.pred)
customer.segOne.pred[0]
customer.segOne.pred[1]
customer.segOne.pred[2]
customer.segOne.pred[3]
customer.segOne.rfResult<-table(customer.segOne.pred[1], test.segOne$userType)
length(customer.segOne.pred[1])
length(test.segOne$userType)
customer.segOne.pred[1]
customer.segOne.pred[1,0]
customer.segOne.rfResult <- table(test.segOne$userType, predictions(customer.segOne.pred))
customer.segOne.rfResult
accuracy<- sum(diag(customer.segOne.rfResult)) / sum(customer.segOne.rfResult)
accuracy
# KNN
customer.knn.segOne <- train(userType~., data = train.segOne, trControl = train_control, method = "knn")
# KNN
train_control <- trainControl(method = "cv", number = 10)
customer.knn.segOne <- train(userType~., data = train.segOne, trControl = train_control, method = "knn")
# KNN
targetValue <- train.segOne$onsite
customer.knn.segOne <- knn(train.segOne,test.segOne,cl=iris_target_category,k=10)
# KNN
targetValue <- train.segOne$onsite
customer.knn.segOne <- knn(train.segOne,test.segOne,cl=targetValue,k=10)
set.seed(42)
# remove missing vlaues before this call
customer.segOne.rf <- ranger(
as.factor(userType) ~ .,
data = train.segOne,
importance = "impurity",
num.trees = 2000
)
customer.segOne.pred <- predict(customer.segOne.rf, test.segOne)
customer.segOne.rfResult<- table(test.segOne$userType, predictions(customer.segOne.pred))
customer.segOne.rfResult
accuracy<- sum(diag(customer.segOne.rfResult)) / sum(customer.segOne.rfResult)
accuracy
# KNN
train_control <- trainControl(method = "cv", number = 2)
customer.knn.segOne <- train(userType~., data = train.segOne, trControl = train_control, method = "knn")
# KNN
train_control <- trainControl(method = "cv", number = 1)
customer.knn.segOne <- train(userType~., data = train.segOne, trControl = train_control, method = "knn")
# KNN
train_control <- trainControl(method = "cv", number = 1)
customer.knn.segOne <- train(userType~., data = train.segOne, method = "knn")
# KNN
train_control <- trainControl(method = "cv", number = 5)
customer.knn.segOne <- train(userType~., data = train.segOne, method = "knn")
